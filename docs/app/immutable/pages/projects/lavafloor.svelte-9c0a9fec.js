var je=Object.defineProperty;var Ve=(q,t,e)=>t in q?je(q,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):q[t]=e;var _t=(q,t,e)=>(Ve(q,typeof t!="symbol"?t+"":t,e),e);import{S as We,i as Oe,s as De,e as ct,t as lt,c as ht,a as dt,h as ut,d as K,b as Ae,g as At,K as X,k as pt,J as He,m as ft,P as Ht,j as se,E as ne,G as Ge,v as Ye,W as Xe,V as Ue}from"../../chunks/index-227296ef.js";import{E as Pe,V as wt,a as Vi,Q as ie,S as oe,R as Ke,M as Pt,B as Ne,b as kt,c as Ze,C as $e,D as Qe,d as Je,H as ts,P as es,W as ss,e as ns,f as is}from"../../chunks/OrbitControls-d5031145.js";const Wi=new Pe(0,0,0,"YXZ"),Oi=new wt;const Di=Math.PI/2;class Q{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new a);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new a);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new Q);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],c=s[2],l=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],w=n[0],v=n[1],y=n[2],m=n[3],x=n[4],g=n[5],E=n[6],C=n[7],P=n[8];return i[0]=o*w+r*m+c*E,i[1]=o*v+r*x+c*C,i[2]=o*y+r*g+c*P,i[3]=l*w+d*m+u*E,i[4]=l*v+d*x+u*C,i[5]=l*y+d*g+u*P,i[6]=h*w+f*m+p*E,i[7]=h*v+f*x+p*C,i[8]=h*y+f*g+p*P,e}scale(t,e){e===void 0&&(e=new Q);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new a);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let c=3;const l=c;let d;const u=4;let h;do{if(o=l-c,i[o+n*o]===0){for(r=o+1;r<l;r++)if(i[o+n*r]!==0){d=u;do h=u-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<l;r++){const f=i[o+n*r]/i[o+n*o];d=u;do h=u-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--c);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new Q);const e=3,s=6,n=os;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const c=r;let l;const d=s;let u;do{if(i=c-r,n[i+s*i]===0){for(o=i+1;o<c;o++)if(n[i+s*o]!==0){l=d;do u=d-l,n[u+s*i]+=n[u+s*o];while(--l);break}}if(n[i+s*i]!==0)for(o=i+1;o<c;o++){const h=n[i+s*o]/n[i+s*i];l=d;do u=d-l,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*h;while(--l)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];l=s;do u=s-l,n[u+s*o]=n[u+s*o]-n[u+s*i]*h;while(--l)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];l=s;do u=s-l,n[u+s*i]=n[u+s*i]*h;while(--l)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,c=n+n,l=e*o,d=e*r,u=e*c,h=s*r,f=s*c,p=n*c,w=i*o,v=i*r,y=i*c,m=this.elements;return m[3*0+0]=1-(h+p),m[3*0+1]=d-y,m[3*0+2]=u+v,m[3*1+0]=d+y,m[3*1+1]=1-(l+p),m[3*1+2]=f-w,m[3*2+0]=u-v,m[3*2+1]=f+w,m[3*2+2]=1-(l+h),this}transpose(t){t===void 0&&(t=new Q);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const os=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class a{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new a);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z;return e.x=r*i-c*n,e.y=c*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new a(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new a(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new Q([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new a);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new a);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new a),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new a),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new a),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=rs,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=as;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(re),re.almostEquals(t,e)}clone(){return new a(this.x,this.y,this.z)}}a.ZERO=new a(0,0,0);a.UNIT_X=new a(1,0,0);a.UNIT_Y=new a(0,1,0);a.UNIT_Z=new a(0,0,1);const rs=new a,as=new a,re=new a;class Z{constructor(t){t===void 0&&(t={}),this.lowerBound=new a,this.upperBound=new a,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let c=1;c<t.length;c++){let l=t[c];r&&(r.vmult(l,ae),l=ae),l.x>o.x&&(o.x=l.x),l.x<i.x&&(i.x=l.x),l.y>o.y&&(o.y=l.y),l.y<i.y&&(i.y=l.y),l.z>o.z&&(o.z=l.z),l.z<i.z&&(i.z=l.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new Z().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,c=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&c}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,c){const l=this.lowerBound,d=this.upperBound;t.copy(l),e.set(d.x,l.y,l.z),s.set(d.x,d.y,l.z),n.set(l.x,d.y,d.z),i.set(d.x,l.y,d.z),o.set(l.x,d.y,l.z),r.set(l.x,l.y,d.z),c.copy(d)}toLocalFrame(t,e){const s=ce,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,c,l,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=ce,n=s[0],i=s[1],o=s[2],r=s[3],c=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,c,l,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,c=(this.upperBound.x-s.x)*n,l=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,c),Math.min(l,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,c),Math.max(l,d)),Math.max(u,h));return!(p<0||f>p)}}const ae=new a,ce=[new a,new a,new a,new a,new a,new a,new a,new a];class le{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class Be{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class G{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new a),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=cs,n=ls;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new G);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,c=t.y,l=t.z,d=t.w;return e.x=s*d+o*r+n*l-i*c,e.y=n*d+o*c+i*r-s*l,e.z=i*d+o*l+s*c-n*r,e.w=o*d-s*r-n*c-i*l,e}inverse(t){t===void 0&&(t=new G);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new G),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new a);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,c=this.z,l=this.w,d=l*s+r*i-c*n,u=l*n+c*s-o*i,h=l*i+o*n-r*s,f=-o*s-r*n-c*i;return e.x=d*l+f*-o+u*-c-h*-r,e.y=u*l+f*-r+h*-o-d*-c,e.z=h*l+f*-c+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,c=this.z,l=this.w;switch(e){case"YZX":const d=o*r+c*l;if(d>.499&&(s=2*Math.atan2(o,l),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,l),n=-Math.PI/2,i=0),s===void 0){const u=o*o,h=r*r,f=c*c;s=Math.atan2(2*r*l-2*o*c,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*l-2*r*c,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),c=Math.sin(t/2),l=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=c*o*r+i*l*d,this.y=i*l*r-c*o*d,this.z=i*o*d+c*l*r,this.w=i*o*r-c*l*d):n==="YXZ"?(this.x=c*o*r+i*l*d,this.y=i*l*r-c*o*d,this.z=i*o*d-c*l*r,this.w=i*o*r+c*l*d):n==="ZXY"?(this.x=c*o*r-i*l*d,this.y=i*l*r+c*o*d,this.z=i*o*d+c*l*r,this.w=i*o*r-c*l*d):n==="ZYX"?(this.x=c*o*r-i*l*d,this.y=i*l*r+c*o*d,this.z=i*o*d-c*l*r,this.w=i*o*r+c*l*d):n==="YZX"?(this.x=c*o*r+i*l*d,this.y=i*l*r+c*o*d,this.z=i*o*d-c*l*r,this.w=i*o*r-c*l*d):n==="XZY"&&(this.x=c*o*r-i*l*d,this.y=i*l*r-c*o*d,this.z=i*o*d+c*l*r,this.w=i*o*r+c*l*d),this}clone(){return new G(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new G);const n=this.x,i=this.y,o=this.z,r=this.w;let c=t.x,l=t.y,d=t.z,u=t.w,h,f,p,w,v;return f=n*c+i*l+o*d+r*u,f<0&&(f=-f,c=-c,l=-l,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),w=Math.sin((1-e)*h)/p,v=Math.sin(e*h)/p):(w=1-e,v=e),s.x=w*n+v*c,s.y=w*i+v*l,s.z=w*o+v*d,s.w=w*r+v*u,s}integrate(t,e,s,n){n===void 0&&(n=new G);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,c=this.x,l=this.y,d=this.z,u=this.w,h=e*.5;return n.x+=h*(i*u+o*d-r*l),n.y+=h*(o*u+r*c-i*d),n.z+=h*(r*u+i*l-o*c),n.w+=h*(-i*c-o*l-r*d),n}}const cs=new a,ls=new a,hs={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class F{constructor(t){t===void 0&&(t={}),this.id=F.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}F.idCounter=0;F.types=hs;class j{constructor(t){t===void 0&&(t={}),this.position=new a,this.quaternion=new G,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return j.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return j.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new a),s.vsub(t,n),e.conjugate(he),he.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new a),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new a),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new a),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const he=new G;class Nt extends F{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:F.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new a;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let c=0;c!==r;c++){const l=(c+1)%r;e[o[c]].vsub(e[o[l]],n),n.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new a;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];Nt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new a,o=new a;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,c,l){const d=new a;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),i.vmult(d,d);const w=d.dot(o);w>h&&(h=w,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const w=s.vertices[s.faces[u][p]],v=new a;v.copy(w),i.vmult(v,v),n.vadd(v,v),f.push(v)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,c,l)}findSeparatingAxis(t,e,s,n,i,o,r,c){const l=new a,d=new a,u=new a,h=new a,f=new a,p=new a;let w=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let y=0;y!==v.uniqueAxes.length;y++){s.vmult(v.uniqueAxes[y],l);const m=v.testSepAxis(l,t,e,s,n,i);if(m===!1)return!1;m<w&&(w=m,o.copy(l))}else{const y=r?r.length:v.faces.length;for(let m=0;m<y;m++){const x=r?r[m]:m;l.copy(v.faceNormals[x]),s.vmult(l,l);const g=v.testSepAxis(l,t,e,s,n,i);if(g===!1)return!1;g<w&&(w=g,o.copy(l))}}if(t.uniqueAxes)for(let y=0;y!==t.uniqueAxes.length;y++){i.vmult(t.uniqueAxes[y],d);const m=v.testSepAxis(d,t,e,s,n,i);if(m===!1)return!1;m<w&&(w=m,o.copy(d))}else{const y=c?c.length:t.faces.length;for(let m=0;m<y;m++){const x=c?c[m]:m;d.copy(t.faceNormals[x]),i.vmult(d,d);const g=v.testSepAxis(d,t,e,s,n,i);if(g===!1)return!1;g<w&&(w=g,o.copy(d))}}for(let y=0;y!==v.uniqueEdges.length;y++){s.vmult(v.uniqueEdges[y],h);for(let m=0;m!==t.uniqueEdges.length;m++)if(i.vmult(t.uniqueEdges[m],f),h.cross(f,p),!p.almostZero()){p.normalize();const x=v.testSepAxis(p,t,e,s,n,i);if(x===!1)return!1;x<w&&(w=x,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;Nt.project(r,t,s,n,Gt),Nt.project(e,t,i,o,Yt);const c=Gt[0],l=Gt[1],d=Yt[0],u=Yt[1];if(c<u||d<l)return!1;const h=c-u,f=d-l;return h<f?h:f}calculateLocalInertia(t,e){const s=new a,n=new a;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const c=new a,l=new a,d=new a,u=new a,h=new a,f=new a,p=new a,w=new a,v=this,y=[],m=n,x=y;let g=-1,E=Number.MAX_VALUE;for(let B=0;B<v.faces.length;B++){c.copy(v.faceNormals[B]),s.vmult(c,c);const I=c.dot(t);I<E&&(E=I,g=B)}if(g<0)return;const C=v.faces[g];C.connectedFaces=[];for(let B=0;B<v.faces.length;B++)for(let I=0;I<v.faces[B].length;I++)C.indexOf(v.faces[B][I])!==-1&&B!==g&&C.connectedFaces.indexOf(B)===-1&&C.connectedFaces.push(B);const P=C.length;for(let B=0;B<P;B++){const I=v.vertices[C[B]],k=v.vertices[C[(B+1)%P]];I.vsub(k,l),d.copy(l),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[g]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(I),s.vmult(f,f),e.vadd(f,f);const b=C.connectedFaces[B];p.copy(this.faceNormals[b]);const A=this.getPlaneConstantOfFace(b);w.copy(p),s.vmult(w,w);const S=A-w.dot(e);for(this.clipFaceAgainstPlane(m,x,w,S);m.length;)m.shift();for(;x.length;)m.push(x.shift())}p.copy(this.faceNormals[g]);const M=this.getPlaneConstantOfFace(g);w.copy(p),s.vmult(w,w);const _=M-w.dot(e);for(let B=0;B<m.length;B++){let I=w.dot(m[B])+_;if(I<=i&&(console.log(`clamped: depth=${I} to minDist=${i}`),I=i),I<=o){const k=m[B];if(I<=1e-6){const b={point:k,normal:w,depth:I};r.push(b)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let c=t[t.length-1],l=t[0];i=s.dot(c)+n;for(let d=0;d<r;d++){if(l=t[d],o=s.dot(l)+n,i<0)if(o<0){const u=new a;u.copy(l),e.push(u)}else{const u=new a;c.lerp(l,i/(i-o),u),e.push(u)}else if(o<0){const u=new a;c.lerp(l,i/(i-o),u),e.push(u),e.push(l)}c=l,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new a);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new a);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,c,l,d,u,h=new a;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(l===void 0||p.x>l)&&(l=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(c===void 0||p.z<c)&&(c=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,c),n.set(l,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new a);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new a;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let c=n[r];const l=e[s[r][0]],d=new a;t.vsub(l,d);const u=c.dot(d),h=new a;o.vsub(l,h);const f=c.dot(h);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=ds;let c=0,l=0;const d=us,u=t.vertices;d.setZero(),j.vectorToLocalFrame(s,n,e,r),j.pointToLocalFrame(s,n,d,d);const h=d.dot(r);l=c=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>c&&(c=p),p<l&&(l=p)}if(l-=h,c-=h,l>c){const f=l;l=c,c=f}i[0]=c,i[1]=l}}const Gt=[],Yt=[];new a;const ds=new a,us=new a;class Et extends F{constructor(t){super({type:F.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=a,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],c=new Nt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=c,c.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new a),Et.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)at.set(i[o][0],i[o][1],i[o][2]),e.vmult(at,at),t.vadd(at,at),s(at.x,at.y,at.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;J[0].set(i.x,i.y,i.z),J[1].set(-i.x,i.y,i.z),J[2].set(-i.x,-i.y,i.z),J[3].set(-i.x,-i.y,-i.z),J[4].set(i.x,-i.y,-i.z),J[5].set(i.x,i.y,-i.z),J[6].set(-i.x,i.y,-i.z),J[7].set(i.x,-i.y,i.z);const o=J[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const c=J[r];e.vmult(c,c),t.vadd(c,c);const l=c.x,d=c.y,u=c.z;l>n.x&&(n.x=l),d>n.y&&(n.y=d),u>n.z&&(n.z=u),l<s.x&&(s.x=l),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const at=new a,J=[new a,new a,new a,new a,new a,new a,new a,new a],Qt={DYNAMIC:1,STATIC:2,KINEMATIC:4},Jt={AWAKE:0,SLEEPY:1,SLEEPING:2};class N extends Be{constructor(t){t===void 0&&(t={}),super(),this.id=N.idCounter++,this.index=-1,this.world=null,this.vlambda=new a,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new a,this.previousPosition=new a,this.interpolatedPosition=new a,this.initPosition=new a,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new a,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new a,this.force=new a;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?N.STATIC:N.DYNAMIC,typeof t.type==typeof N.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep!="undefined"?t.allowSleep:!0,this.sleepState=N.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit!="undefined"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit!="undefined"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new a,this.quaternion=new G,this.initQuaternion=new G,this.previousQuaternion=new G,this.interpolatedQuaternion=new G,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new a,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new a,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new a,this.invInertia=new a,this.invInertiaWorld=new Q,this.invMassSolve=0,this.invInertiaSolve=new a,this.invInertiaWorldSolve=new Q,this.fixedRotation=typeof t.fixedRotation!="undefined"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping!="undefined"?t.angularDamping:.01,this.linearFactor=new a(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new a(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new Z,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new a,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=N.AWAKE,this.wakeUpAfterNarrowphase=!1,t===N.SLEEPING&&this.dispatchEvent(N.wakeupEvent)}sleep(){this.sleepState=N.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===N.AWAKE&&s<n?(this.sleepState=N.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(N.sleepyEvent)):e===N.SLEEPY&&s>n?this.wakeUp():e===N.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(N.sleepEvent))}}updateSolveMassProperties(){this.sleepState===N.SLEEPING||this.type===N.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new a),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new a),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new a),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new a,i=new G;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),c=o.boundingSphereRadius;r+c>n&&(n=r+c)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=ps,o=fs,r=this.quaternion,c=this.aabb,l=ms;for(let d=0;d!==n;d++){const u=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),u.calculateWorldAABB(i,o,l.lowerBound,l.upperBound),d===0?c.copy(l):c.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=vs,n=ws;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new a),this.type!==N.DYNAMIC)return;this.sleepState===N.SLEEPING&&this.wakeUp();const s=xs;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new a),this.type!==N.DYNAMIC)return;const s=gs,n=bs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===N.DYNAMIC&&(this.sleepState===N.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new a),this.type!==N.DYNAMIC)return;this.sleepState===N.SLEEPING&&this.wakeUp();const s=e,n=Es;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=zs;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new a),this.type!==N.DYNAMIC)return;const s=Cs,n=Ms;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=Ss;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Et.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new a;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===N.DYNAMIC||this.type===N.KINEMATIC)||this.sleepState===N.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,c=this.torque,l=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const p=u.elements,w=this.angularFactor,v=c.x*w.x,y=c.y*w.y,m=c.z*w.z;i.x+=t*(p[0]*v+p[1]*y+p[2]*m),i.y+=t*(p[3]*v+p[4]*y+p[5]*m),i.z+=t*(p[6]*v+p[7]*y+p[8]*m),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}N.idCounter=0;N.COLLIDE_EVENT_NAME="collide";N.DYNAMIC=Qt.DYNAMIC;N.STATIC=Qt.STATIC;N.KINEMATIC=Qt.KINEMATIC;N.AWAKE=Jt.AWAKE;N.SLEEPY=Jt.SLEEPY;N.SLEEPING=Jt.SLEEPING;N.wakeupEvent={type:"wakeup"};N.sleepyEvent={type:"sleepy"};N.sleepEvent={type:"sleep"};const ps=new a,fs=new G,ms=new Z,vs=new Q,ws=new Q,ys=new Q,xs=new a,gs=new a,bs=new a,Es=new a,zs=new a,Cs=new a,Ms=new a,Ss=new a;class As{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!((t.collisionFilterGroup&e.collisionFilterMask)===0||(e.collisionFilterGroup&t.collisionFilterMask)===0||((t.type&N.STATIC)!==0||t.sleepState===N.SLEEPING)&&((e.type&N.STATIC)!==0||e.sleepState===N.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=Ps;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=Ns,n=Bs,i=Fs,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const c=n[r].id,l=i[r].id,d=c<l?`${c},${l}`:`${l},${c}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const c=s.keys.pop(),l=s[c];t.push(n[l]),e.push(i[l]),delete s[c]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new a;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Ps=new a;new a;new G;new a;const Ns={keys:[]},Bs=[],Fs=[];new a;new a;new a;class Fe extends As{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let c=0;c!==i;c++)for(let l=0;l!==c;l++)o=n[c],r=n[l],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class jt{constructor(){this.rayFromWorld=new a,this.rayToWorld=new a,this.hitNormalWorld=new a,this.hitPointWorld=new a,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let _e,Ie,Te,qe,Le,Re,ke;const te={CLOSEST:1,ANY:2,ALL:4};_e=F.types.SPHERE;Ie=F.types.PLANE;Te=F.types.BOX;qe=F.types.CYLINDER;Le=F.types.CONVEXPOLYHEDRON;Re=F.types.HEIGHTFIELD;ke=F.types.TRIMESH;class H{get[_e](){return this._intersectSphere}get[Ie](){return this._intersectPlane}get[Te](){return this._intersectBox}get[qe](){return this._intersectConvex}get[Le](){return this._intersectConvex}get[Re](){return this._intersectHeightfield}get[ke](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new a),e===void 0&&(e=new a),this.from=t.clone(),this.to=e.clone(),this.direction=new a,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=H.ANY,this.result=new jt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||H.ANY,this.result=e.result||new jt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask!="undefined"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup!="undefined"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse!="undefined"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(de),Xt.length=0,t.broadphase.aabbQuery(t,de,Xt),this.intersectBodies(Xt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||(this.collisionFilterGroup&t.collisionFilterMask)===0||(t.collisionFilterGroup&this.collisionFilterMask)===0)return;const n=_s,i=Is;for(let o=0,r=t.shapes.length;o<r;o++){const c=t.shapes[o];if(!(s&&!c.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(c,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(Xs(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,c=this.direction,l=new a(0,0,1);e.vmult(l,l);const d=new a;o.vsub(s,d);const u=d.dot(l);r.vsub(s,d);const h=d.dot(l);if(u*h>0||o.distanceTo(r)<u)return;const f=l.dot(c);if(Math.abs(f)<this.precision)return;const p=new a,w=new a,v=new a;o.vsub(s,p);const y=-l.dot(p)/f;c.scale(y,w),o.vadd(w,v),this.reportIntersection(l,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=Ts;o.from.copy(this.from),o.to.copy(this.to),j.pointToLocalFrame(s,e,o.from,o.from),j.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=qs;let c,l,d,u;c=l=0,d=u=t.data.length-1;const h=new Z;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),c=Math.max(c,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=c;f<d;f++)for(let p=l;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),j.pointToWorldFrame(s,e,t.pillarOffset,It),this._intersectConvex(t.pillarConvex,e,It,n,i,ue),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),j.pointToWorldFrame(s,e,t.pillarOffset,It),this._intersectConvex(t.pillarConvex,e,It,n,i,ue)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,c=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-c**2,h=d**2-4*l*u,f=Ls,p=Rs;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const w=(-d-Math.sqrt(h))/(2*l),v=(-d+Math.sqrt(h))/(2*l);if(w>=0&&w<=1&&(o.lerp(r,w,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=ks,c=pe,l=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,w=this.to,v=p.distanceTo(w),y=l?l.length:d.length,m=this.result;for(let x=0;!m.shouldStop&&x<y;x++){const g=l?l[x]:x,E=d[g],C=h[g],P=e,M=s;c.copy(u[E[0]]),P.vmult(c,c),c.vadd(M,c),c.vsub(p,c),P.vmult(C,r);const _=f.dot(r);if(Math.abs(_)<this.precision)continue;const B=r.dot(c)/_;if(!(B<0)){f.scale(B,U),U.vadd(p,U),$.copy(u[E[0]]),P.vmult($,$),M.vadd($,$);for(let I=1;!m.shouldStop&&I<E.length-1;I++){tt.copy(u[E[I]]),et.copy(u[E[I+1]]),P.vmult(tt,tt),P.vmult(et,et),M.vadd(tt,tt),M.vadd(et,et);const k=U.distanceTo(p);!(H.pointInTriangle(U,$,tt,et)||H.pointInTriangle(U,tt,$,et))||k>v||this.reportIntersection(r,U,i,n,g)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=js,c=Gs,l=Ys,d=pe,u=Vs,h=Ws,f=Os,p=Hs,w=Ds,v=t.indices;t.vertices;const y=this.from,m=this.to,x=this.direction;l.position.copy(s),l.quaternion.copy(e),j.vectorToLocalFrame(s,e,x,u),j.pointToLocalFrame(s,e,y,h),j.pointToLocalFrame(s,e,m,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const g=h.distanceSquared(f);t.tree.rayQuery(this,l,c);for(let E=0,C=c.length;!this.result.shouldStop&&E!==C;E++){const P=c[E];t.getNormal(P,r),t.getVertex(v[P*3],$),$.vsub(h,d);const M=u.dot(r),_=r.dot(d)/M;if(_<0)continue;u.scale(_,U),U.vadd(h,U),t.getVertex(v[P*3+1],tt),t.getVertex(v[P*3+2],et);const B=U.distanceSquared(h);!(H.pointInTriangle(U,tt,$,et)||H.pointInTriangle(U,$,tt,et))||B>g||(j.vectorToWorldFrame(e,r,w),j.pointToWorldFrame(s,e,U,p),this.reportIntersection(w,p,i,n,P))}c.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,c=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=typeof i!="undefined"?i:-1,this.mode){case H.ALL:this.hasHit=!0,l.set(o,r,t,e,s,n,c),l.hasHit=!0,this.callback(l);break;case H.CLOSEST:(c<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,c));break;case H.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,c),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,yt),s.vsub(e,zt),t.vsub(e,Ut);const i=yt.dot(yt),o=yt.dot(zt),r=yt.dot(Ut),c=zt.dot(zt),l=zt.dot(Ut);let d,u;return(d=c*r-o*l)>=0&&(u=i*l-o*r)>=0&&d+u<i*c-o*o}}H.CLOSEST=te.CLOSEST;H.ANY=te.ANY;H.ALL=te.ALL;const de=new Z,Xt=[],zt=new a,Ut=new a,_s=new a,Is=new G,U=new a,$=new a,tt=new a,et=new a;new a;new jt;const ue={faceList:[0]},It=new a,Ts=new H,qs=[],Ls=new a,Rs=new a,ks=new a;new a;new a;const pe=new a,js=new a,Vs=new a,Ws=new a,Os=new a,Ds=new a,Hs=new a;new Z;const Gs=[],Ys=new j,yt=new a,Tt=new a;function Xs(q,t,e){e.vsub(q,yt);const s=yt.dot(t);return t.scale(s,Tt),Tt.vadd(q,Tt),e.distanceTo(Tt)}class Us{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class fe{constructor(){this.spatial=new a,this.rotational=new a}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Bt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=Bt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new fe,this.jacobianElementB=new fe,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,c=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,c=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,c)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,c=n.torque,l=s.invMassSolve,d=n.invMassSolve;return i.scale(l,me),r.scale(d,ve),s.invInertiaWorldSolve.vmult(o,we),n.invInertiaWorldSolve.vmult(c,ye),t.multiplyVectors(me,we)+e.multiplyVectors(ve,ye)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,c=n.invInertiaWorldSolve;let l=i+o;return r.vmult(t.rotational,qt),l+=qt.dot(t.rotational),c.vmult(e.rotational,qt),l+=qt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=Ks;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Bt.idCounter=0;const me=new a,ve=new a,we=new a,ye=new a,qt=new a,Ks=new a;class Zs extends Bt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new a,this.rj=new a,this.ni=new a}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,c=$s,l=Qs,d=n.velocity,u=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=Js,w=this.jacobianElementA,v=this.jacobianElementB,y=this.ni;o.cross(y,c),r.cross(y,l),y.negate(w.spatial),c.negate(w.rotational),v.spatial.copy(y),v.rotational.copy(l),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const m=y.dot(p),x=this.restitution+1,g=x*h.dot(y)-x*d.dot(y)+f.dot(l)-u.dot(c),E=this.computeGiMf();return-m*e-g*s-t*E}getImpactVelocityAlongNormal(){const t=tn,e=en,s=sn,n=nn,i=on;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const $s=new a,Qs=new a,Js=new a,tn=new a,en=new a,sn=new a,nn=new a,on=new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class xe extends Bt{constructor(t,e,s){super(t,e,-s,s),this.ri=new a,this.rj=new a,this.t=new a}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=rn,o=an,r=this.t;s.cross(r,i),n.cross(r,o);const c=this.jacobianElementA,l=this.jacobianElementB;r.negate(c.spatial),i.negate(c.rotational),l.spatial.copy(r),l.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const rn=new a,an=new a;class Vt{constructor(t,e,s){s=Us.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Vt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Vt.idCounter=0;class Wt{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Wt.idCounter++,this.friction=typeof t.friction!="undefined"?t.friction:-1,this.restitution=typeof t.restitution!="undefined"?t.restitution:-1}}Wt.idCounter=0;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new H;new a;new a;new a;new a(1,0,0),new a(0,1,0),new a(0,0,1);new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;class cn extends F{constructor(){super({type:F.types.PLANE}),this.worldNormal=new a,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new a),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){st.set(0,0,1),e.vmult(st,st);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),st.x===1?n.x=t.x:st.x===-1&&(s.x=t.x),st.y===1?n.y=t.y:st.y===-1&&(s.y=t.y),st.z===1?n.z=t.z:st.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const st=new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new a;new Z;new a;new Z;new a;new a;new a;new a;new a;new a;new a;new Z;new a;new j;new Z;class ln{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class hn extends ln{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,c=e.bodies,l=c.length,d=t;let u,h,f,p,w,v;if(r!==0)for(let g=0;g!==l;g++)c[g].updateSolveMassProperties();const y=un,m=pn,x=dn;y.length=r,m.length=r,x.length=r;for(let g=0;g!==r;g++){const E=o[g];x[g]=0,m[g]=E.computeB(d),y[g]=1/E.computeC()}if(r!==0){for(let C=0;C!==l;C++){const P=c[C],M=P.vlambda,_=P.wlambda;M.set(0,0,0),_.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let C=0;C!==r;C++){const P=o[C];u=m[C],h=y[C],v=x[C],w=P.computeGWlambda(),f=h*(u-w-P.eps*v),v+f<P.minForce?f=P.minForce-v:v+f>P.maxForce&&(f=P.maxForce-v),x[C]+=f,p+=f>0?f:-f,P.addToWlambda(f)}if(p*p<i)break}for(let C=0;C!==l;C++){const P=c[C],M=P.velocity,_=P.angularVelocity;P.vlambda.vmul(P.linearFactor,P.vlambda),M.vadd(P.vlambda,M),P.wlambda.vmul(P.angularFactor,P.wlambda),_.vadd(P.wlambda,_)}let g=o.length;const E=1/d;for(;g--;)o[g].multiplier=x[g]*E}return s}}const dn=[],un=[],pn=[];N.STATIC;class fn{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class mn extends fn{constructor(){super(...arguments),this.type=a}constructObject(){return new a}}const O={sphereSphere:F.types.SPHERE,spherePlane:F.types.SPHERE|F.types.PLANE,boxBox:F.types.BOX|F.types.BOX,sphereBox:F.types.SPHERE|F.types.BOX,planeBox:F.types.PLANE|F.types.BOX,convexConvex:F.types.CONVEXPOLYHEDRON,sphereConvex:F.types.SPHERE|F.types.CONVEXPOLYHEDRON,planeConvex:F.types.PLANE|F.types.CONVEXPOLYHEDRON,boxConvex:F.types.BOX|F.types.CONVEXPOLYHEDRON,sphereHeightfield:F.types.SPHERE|F.types.HEIGHTFIELD,boxHeightfield:F.types.BOX|F.types.HEIGHTFIELD,convexHeightfield:F.types.CONVEXPOLYHEDRON|F.types.HEIGHTFIELD,sphereParticle:F.types.PARTICLE|F.types.SPHERE,planeParticle:F.types.PLANE|F.types.PARTICLE,boxParticle:F.types.BOX|F.types.PARTICLE,convexParticle:F.types.PARTICLE|F.types.CONVEXPOLYHEDRON,cylinderCylinder:F.types.CYLINDER,sphereCylinder:F.types.SPHERE|F.types.CYLINDER,planeCylinder:F.types.PLANE|F.types.CYLINDER,boxCylinder:F.types.BOX|F.types.CYLINDER,convexCylinder:F.types.CONVEXPOLYHEDRON|F.types.CYLINDER,heightfieldCylinder:F.types.HEIGHTFIELD|F.types.CYLINDER,particleCylinder:F.types.PARTICLE|F.types.CYLINDER,sphereTrimesh:F.types.SPHERE|F.types.TRIMESH,planeTrimesh:F.types.PLANE|F.types.TRIMESH};class vn{get[O.sphereSphere](){return this.sphereSphere}get[O.spherePlane](){return this.spherePlane}get[O.boxBox](){return this.boxBox}get[O.sphereBox](){return this.sphereBox}get[O.planeBox](){return this.planeBox}get[O.convexConvex](){return this.convexConvex}get[O.sphereConvex](){return this.sphereConvex}get[O.planeConvex](){return this.planeConvex}get[O.boxConvex](){return this.boxConvex}get[O.sphereHeightfield](){return this.sphereHeightfield}get[O.boxHeightfield](){return this.boxHeightfield}get[O.convexHeightfield](){return this.convexHeightfield}get[O.sphereParticle](){return this.sphereParticle}get[O.planeParticle](){return this.planeParticle}get[O.boxParticle](){return this.boxParticle}get[O.convexParticle](){return this.convexParticle}get[O.cylinderCylinder](){return this.convexConvex}get[O.sphereCylinder](){return this.sphereConvex}get[O.planeCylinder](){return this.planeConvex}get[O.boxCylinder](){return this.boxConvex}get[O.convexCylinder](){return this.convexConvex}get[O.heightfieldCylinder](){return this.heightfieldCylinder}get[O.particleCylinder](){return this.particleCylinder}get[O.sphereTrimesh](){return this.sphereTrimesh}get[O.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new mn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Zs(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const c=this.currentContactMaterial;r.restitution=c.restitution,r.setSpookParams(c.contactEquationStiffness,c.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,d=n.material||e.material;return l&&d&&l.restitution>=0&&d.restitution>=0&&(r.restitution=l.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,c=this.currentContactMaterial;let l=c.friction;const d=i.material||s.material,u=o.material||n.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(l=d.friction*u.friction),l>0){const h=l*r.gravity.length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,w=p.length?p.pop():new xe(s,n,h*f),v=p.length?p.pop():new xe(s,n,h*f);return w.bi=v.bi=s,w.bj=v.bj=n,w.minForce=v.minForce=-h*f,w.maxForce=v.maxForce=h*f,w.ri.copy(t.ri),w.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(w.t,v.t),w.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),v.setSpookParams(c.frictionEquationStiffness,c.frictionEquationRelaxation,r.dt),w.enabled=v.enabled=t.enabled,e.push(w,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];mt.setZero(),gt.setZero(),bt.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(mt.vadd(e.ni,mt),gt.vadd(e.ri,gt),bt.vadd(e.rj,bt)):(mt.vsub(e.ni,mt),gt.vadd(e.rj,gt),bt.vadd(e.ri,bt));const o=1/t;gt.scale(o,s.ri),bt.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),mt.normalize(),mt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const c=xn,l=gn,d=wn,u=yn;for(let h=0,f=t.length;h!==f;h++){const p=t[h],w=e[h];let v=null;p.material&&w.material&&(v=s.getContactMaterial(p.material,w.material)||null);const y=p.type&N.KINEMATIC&&w.type&N.STATIC||p.type&N.STATIC&&w.type&N.KINEMATIC||p.type&N.KINEMATIC&&w.type&N.KINEMATIC;for(let m=0;m<p.shapes.length;m++){p.quaternion.mult(p.shapeOrientations[m],c),p.quaternion.vmult(p.shapeOffsets[m],d),d.vadd(p.position,d);const x=p.shapes[m];for(let g=0;g<w.shapes.length;g++){w.quaternion.mult(w.shapeOrientations[g],l),w.quaternion.vmult(w.shapeOffsets[g],u),u.vadd(w.position,u);const E=w.shapes[g];if(!(x.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&x.collisionFilterGroup)||d.distanceTo(u)>x.boundingSphereRadius+E.boundingSphereRadius)continue;let C=null;x.material&&E.material&&(C=s.getContactMaterial(x.material,E.material)||null),this.currentContactMaterial=C||v||s.defaultContactMaterial;const P=x.type|E.type,M=this[P];if(M){let _=!1;x.type<E.type?_=M.call(this,x,E,d,u,c,l,p,w,x,E,y):_=M.call(this,E,x,u,d,l,c,w,p,x,E,y),_&&y&&(s.shapeOverlapKeeper.set(x.id,E.id),s.bodyOverlapKeeper.set(p.id,w.id))}}}}}sphereSphere(t,e,s,n,i,o,r,c,l,d,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,c,t,e,l,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(c.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,c,l,d,u){const h=this.createContactEquation(r,c,t,e,l,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Lt),h.ni.scale(h.ni.dot(Lt),ge),Lt.vsub(ge,h.rj),-Lt.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(c.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}sphereBox(t,e,s,n,i,o,r,c,l,d,u){const h=this.v3pool,f=Yn;s.vsub(n,Rt),e.getSideNormals(f,o);const p=t.radius;let w=!1;const v=Un,y=Kn,m=Zn;let x=null,g=0,E=0,C=0,P=null;for(let z=0,W=f.length;z!==W&&w===!1;z++){const T=Dn;T.copy(f[z]);const L=T.length();T.normalize();const V=Rt.dot(T);if(V<L+p&&V>0){const D=Hn,R=Gn;D.copy(f[(z+1)%3]),R.copy(f[(z+2)%3]);const xt=D.length(),Ft=R.length();D.normalize(),R.normalize();const Ot=Rt.dot(D),Dt=Rt.dot(R);if(Ot<xt&&Ot>-xt&&Dt<Ft&&Dt>-Ft){const ee=Math.abs(V-L-p);if((P===null||ee<P)&&(P=ee,E=Ot,C=Dt,x=L,v.copy(T),y.copy(D),m.copy(R),g++,u))return!0}}}if(g){w=!0;const z=this.createContactEquation(r,c,t,e,l,d);v.scale(-p,z.ri),z.ni.copy(v),z.ni.negate(z.ni),v.scale(x,v),y.scale(E,y),v.vadd(y,v),m.scale(C,m),v.vadd(m,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),z.rj.vadd(n,z.rj),z.rj.vsub(c.position,z.rj),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}let M=h.get();const _=Xn;for(let z=0;z!==2&&!w;z++)for(let W=0;W!==2&&!w;W++)for(let T=0;T!==2&&!w;T++)if(M.set(0,0,0),z?M.vadd(f[0],M):M.vsub(f[0],M),W?M.vadd(f[1],M):M.vsub(f[1],M),T?M.vadd(f[2],M):M.vsub(f[2],M),n.vadd(M,_),_.vsub(s,_),_.lengthSquared()<p*p){if(u)return!0;w=!0;const L=this.createContactEquation(r,c,t,e,l,d);L.ri.copy(_),L.ri.normalize(),L.ni.copy(L.ri),L.ri.scale(p,L.ri),L.rj.copy(M),L.ri.vadd(s,L.ri),L.ri.vsub(r.position,L.ri),L.rj.vadd(n,L.rj),L.rj.vsub(c.position,L.rj),this.result.push(L),this.createFrictionEquationsFromContact(L,this.frictionResult)}h.release(M),M=null;const B=h.get(),I=h.get(),k=h.get(),b=h.get(),A=h.get(),S=f.length;for(let z=0;z!==S&&!w;z++)for(let W=0;W!==S&&!w;W++)if(z%3!==W%3){f[W].cross(f[z],B),B.normalize(),f[z].vadd(f[W],I),k.copy(s),k.vsub(I,k),k.vsub(n,k);const T=k.dot(B);B.scale(T,b);let L=0;for(;L===z%3||L===W%3;)L++;A.copy(s),A.vsub(b,A),A.vsub(I,A),A.vsub(n,A);const V=Math.abs(T),D=A.length();if(V<f[L].length()&&D<p){if(u)return!0;w=!0;const R=this.createContactEquation(r,c,t,e,l,d);I.vadd(b,R.rj),R.rj.copy(R.rj),A.negate(R.ni),R.ni.normalize(),R.ri.copy(R.rj),R.ri.vadd(n,R.ri),R.ri.vsub(s,R.ri),R.ri.normalize(),R.ri.scale(p,R.ri),R.ri.vadd(s,R.ri),R.ri.vsub(r.position,R.ri),R.rj.vadd(n,R.rj),R.rj.vsub(c.position,R.rj),this.result.push(R),this.createFrictionEquationsFromContact(R,this.frictionResult)}}h.release(B,I,k,b,A)}planeBox(t,e,s,n,i,o,r,c,l,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,c,t,e,u)}convexConvex(t,e,s,n,i,o,r,c,l,d,u,h,f){const p=di;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,h,f)){const w=[],v=ui;t.clipAgainstHull(s,i,e,n,o,p,-100,100,w);let y=0;for(let m=0;m!==w.length;m++){if(u)return!0;const x=this.createContactEquation(r,c,t,e,l,d),g=x.ri,E=x.rj;p.negate(x.ni),w[m].normal.negate(v),v.scale(w[m].depth,v),w[m].point.vadd(v,g),E.copy(w[m].point),g.vsub(s,g),E.vsub(n,E),g.vadd(s,g),g.vsub(r.position,g),E.vadd(n,E),E.vsub(c.position,E),this.result.push(x),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(x,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,s,n,i,o,r,c,l,d,u){const h=this.v3pool;s.vsub(n,$n);const f=e.faceNormals,p=e.faces,w=e.vertices,v=t.radius;let y=!1;for(let m=0;m!==w.length;m++){const x=w[m],g=ei;o.vmult(x,g),n.vadd(g,g);const E=ti;if(g.vsub(s,E),E.lengthSquared()<v*v){if(u)return!0;y=!0;const C=this.createContactEquation(r,c,t,e,l,d);C.ri.copy(E),C.ri.normalize(),C.ni.copy(C.ri),C.ri.scale(v,C.ri),g.vsub(n,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(c.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult);return}}for(let m=0,x=p.length;m!==x&&y===!1;m++){const g=f[m],E=p[m],C=si;o.vmult(g,C);const P=ni;o.vmult(w[E[0]],P),P.vadd(n,P);const M=ii;C.scale(-v,M),s.vadd(M,M);const _=oi;M.vsub(P,_);const B=_.dot(C),I=ri;if(s.vsub(P,I),B<0&&I.dot(C)>0){const k=[];for(let b=0,A=E.length;b!==A;b++){const S=h.get();o.vmult(w[E[b]],S),n.vadd(S,S),k.push(S)}if(On(k,C,s)){if(u)return!0;y=!0;const b=this.createContactEquation(r,c,t,e,l,d);C.scale(-v,b.ri),C.negate(b.ni);const A=h.get();C.scale(-B,A);const S=h.get();C.scale(-v,S),s.vsub(n,b.rj),b.rj.vadd(S,b.rj),b.rj.vadd(A,b.rj),b.rj.vadd(n,b.rj),b.rj.vsub(c.position,b.rj),b.ri.vadd(s,b.ri),b.ri.vsub(r.position,b.ri),h.release(A),h.release(S),this.result.push(b),this.createFrictionEquationsFromContact(b,this.frictionResult);for(let z=0,W=k.length;z!==W;z++)h.release(k[z]);return}else for(let b=0;b!==E.length;b++){const A=h.get(),S=h.get();o.vmult(w[E[(b+1)%E.length]],A),o.vmult(w[E[(b+2)%E.length]],S),n.vadd(A,A),n.vadd(S,S);const z=Qn;S.vsub(A,z);const W=Jn;z.unit(W);const T=h.get(),L=h.get();s.vsub(A,L);const V=L.dot(W);W.scale(V,T),T.vadd(A,T);const D=h.get();if(T.vsub(s,D),V>0&&V*V<z.lengthSquared()&&D.lengthSquared()<v*v){if(u)return!0;const R=this.createContactEquation(r,c,t,e,l,d);T.vsub(n,R.rj),T.vsub(s,R.ni),R.ni.normalize(),R.ni.scale(v,R.ri),R.rj.vadd(n,R.rj),R.rj.vsub(c.position,R.rj),R.ri.vadd(s,R.ri),R.ri.vsub(r.position,R.ri),this.result.push(R),this.createFrictionEquationsFromContact(R,this.frictionResult);for(let xt=0,Ft=k.length;xt!==Ft;xt++)h.release(k[xt]);h.release(A),h.release(S),h.release(T),h.release(D),h.release(L);return}h.release(A),h.release(S),h.release(T),h.release(D),h.release(L)}for(let b=0,A=k.length;b!==A;b++)h.release(k[b])}}}planeConvex(t,e,s,n,i,o,r,c,l,d,u){const h=ai,f=ci;f.set(0,0,1),i.vmult(f,f);let p=0;const w=li;for(let v=0;v!==e.vertices.length;v++)if(h.copy(e.vertices[v]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,w),f.dot(w)<=0){if(u)return!0;const m=this.createContactEquation(r,c,t,e,l,d),x=hi;f.scale(f.dot(w),x),h.vsub(x,x),x.vsub(s,m.ri),m.ni.copy(f),h.vsub(n,m.rj),m.ri.vadd(s,m.ri),m.ri.vsub(r.position,m.ri),m.rj.vadd(n,m.rj),m.rj.vsub(c.position,m.rj),this.result.push(m),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(m,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,c,l,d,u){const h=e.data,f=t.radius,p=e.elementSize,w=Ci,v=zi;j.pointToLocalFrame(n,o,s,v);let y=Math.floor((v.x-f)/p)-1,m=Math.ceil((v.x+f)/p)+1,x=Math.floor((v.y-f)/p)-1,g=Math.ceil((v.y+f)/p)+1;if(m<0||g<0||y>h.length||x>h[0].length)return;y<0&&(y=0),m<0&&(m=0),x<0&&(x=0),g<0&&(g=0),y>=h.length&&(y=h.length-1),m>=h.length&&(m=h.length-1),g>=h[0].length&&(g=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const E=[];e.getRectMinMax(y,x,m,g,E);const C=E[0],P=E[1];if(v.z-f>P||v.z+f<C)return;const M=this.result;for(let _=y;_<m;_++)for(let B=x;B<g;B++){const I=M.length;let k=!1;if(e.getConvexTrianglePillar(_,B,!1),j.pointToWorldFrame(n,o,e.pillarOffset,w),s.distanceTo(w)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(k=this.sphereConvex(t,e.pillarConvex,s,w,i,o,r,c,t,e,u)),u&&k||(e.getConvexTrianglePillar(_,B,!0),j.pointToWorldFrame(n,o,e.pillarOffset,w),s.distanceTo(w)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(k=this.sphereConvex(t,e.pillarConvex,s,w,i,o,r,c,t,e,u)),u&&k))return!0;if(M.length-I>2)return}}boxHeightfield(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,c,l,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,w=bi,v=Ei,y=gi;j.pointToLocalFrame(n,o,s,y);let m=Math.floor((y.x-p)/f)-1,x=Math.ceil((y.x+p)/f)+1,g=Math.floor((y.y-p)/f)-1,E=Math.ceil((y.y+p)/f)+1;if(x<0||E<0||m>h.length||g>h[0].length)return;m<0&&(m=0),x<0&&(x=0),g<0&&(g=0),E<0&&(E=0),m>=h.length&&(m=h.length-1),x>=h.length&&(x=h.length-1),E>=h[0].length&&(E=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const C=[];e.getRectMinMax(m,g,x,E,C);const P=C[0],M=C[1];if(!(y.z-p>M||y.z+p<P))for(let _=m;_<x;_++)for(let B=g;B<E;B++){let I=!1;if(e.getConvexTrianglePillar(_,B,!1),j.pointToWorldFrame(n,o,e.pillarOffset,w),s.distanceTo(w)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(I=this.convexConvex(t,e.pillarConvex,s,w,i,o,r,c,null,null,u,v,null)),u&&I||(e.getConvexTrianglePillar(_,B,!0),j.pointToWorldFrame(n,o,e.pillarOffset,w),s.distanceTo(w)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(I=this.convexConvex(t,e.pillarConvex,s,w,i,o,r,c,null,null,u,v,null)),u&&I))return!0}}sphereParticle(t,e,s,n,i,o,r,c,l,d,u){const h=vi;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(c,r,e,t,l,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,c,l,d,u){const h=pi;h.set(0,0,1),r.quaternion.vmult(h,h);const f=fi;if(n.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const w=this.createContactEquation(c,r,e,t,l,d);w.ni.copy(h),w.ni.negate(w.ni),w.ri.set(0,0,0);const v=mi;h.scale(h.dot(n),v),n.vsub(v,v),w.rj.copy(v),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,c,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,c,t,e,u)}convexParticle(t,e,s,n,i,o,r,c,l,d,u){let h=-1;const f=yi,p=xi;let w=null;const v=wi;if(v.copy(n),v.vsub(s,v),i.conjugate(be),be.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let y=0,m=t.faces.length;y!==m;y++){const x=[t.worldVertices[t.faces[y][0]]],g=t.worldFaceNormals[y];n.vsub(x[0],Ee);const E=-g.dot(Ee);if(w===null||Math.abs(E)<Math.abs(w)){if(u)return!0;w=E,h=y,f.copy(g)}}if(h!==-1){const y=this.createContactEquation(c,r,e,t,l,d);f.scale(w,p),p.vadd(n,p),p.vsub(s,p),y.rj.copy(p),f.negate(y.ni),y.ri.set(0,0,0);const m=y.ri,x=y.rj;m.vadd(n,m),m.vsub(c.position,m),x.vadd(s,x),x.vsub(r.position,x),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,c,l,d,u){return this.convexHeightfield(e,t,n,s,o,i,c,r,l,d,u)}particleCylinder(t,e,s,n,i,o,r,c,l,d,u){return this.convexParticle(e,t,n,s,o,i,c,r,l,d,u)}sphereTrimesh(t,e,s,n,i,o,r,c,l,d,u){const h=Pn,f=Nn,p=Bn,w=Fn,v=_n,y=In,m=Rn,x=An,g=Mn,E=kn;j.pointToLocalFrame(n,o,s,v);const C=t.radius;m.lowerBound.set(v.x-C,v.y-C,v.z-C),m.upperBound.set(v.x+C,v.y+C,v.z+C),e.getTrianglesInAABB(m,E);const P=Sn,M=t.radius*t.radius;for(let b=0;b<E.length;b++)for(let A=0;A<3;A++)if(e.getVertex(e.indices[E[b]*3+A],P),P.vsub(v,g),g.lengthSquared()<=M){if(x.copy(P),j.pointToWorldFrame(n,o,x,P),P.vsub(s,g),u)return!0;let S=this.createContactEquation(r,c,t,e,l,d);S.ni.copy(g),S.ni.normalize(),S.ri.copy(S.ni),S.ri.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.copy(P),S.rj.vsub(c.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}for(let b=0;b<E.length;b++)for(let A=0;A<3;A++){e.getVertex(e.indices[E[b]*3+A],h),e.getVertex(e.indices[E[b]*3+(A+1)%3],f),f.vsub(h,p),v.vsub(f,y);const S=y.dot(p);v.vsub(h,y);let z=y.dot(p);if(z>0&&S<0&&(v.vsub(h,y),w.copy(p),w.normalize(),z=y.dot(w),w.scale(z,y),y.vadd(h,y),y.distanceTo(v)<t.radius)){if(u)return!0;const T=this.createContactEquation(r,c,t,e,l,d);y.vsub(v,T.ni),T.ni.normalize(),T.ni.scale(t.radius,T.ri),T.ri.vadd(s,T.ri),T.ri.vsub(r.position,T.ri),j.pointToWorldFrame(n,o,y,y),y.vsub(c.position,T.rj),j.vectorToWorldFrame(o,T.ni,T.ni),j.vectorToWorldFrame(o,T.ri,T.ri),this.result.push(T),this.createFrictionEquationsFromContact(T,this.frictionResult)}}const _=Tn,B=qn,I=Ln,k=Cn;for(let b=0,A=E.length;b!==A;b++){e.getTriangleVertices(E[b],_,B,I),e.getNormal(E[b],k),v.vsub(_,y);let S=y.dot(k);if(k.scale(S,y),v.vsub(y,y),S=y.distanceTo(v),H.pointInTriangle(y,_,B,I)&&S<t.radius){if(u)return!0;let z=this.createContactEquation(r,c,t,e,l,d);y.vsub(v,z.ni),z.ni.normalize(),z.ni.scale(t.radius,z.ri),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),j.pointToWorldFrame(n,o,y,y),y.vsub(c.position,z.rj),j.vectorToWorldFrame(o,z.ni,z.ni),j.vectorToWorldFrame(o,z.ri,z.ri),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,n,i,o,r,c,l,d,u){const h=new a,f=bn;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const w=new a;w.copy(h),j.pointToWorldFrame(n,o,w,h);const v=En;if(h.vsub(s,v),f.dot(v)<=0){if(u)return!0;const m=this.createContactEquation(r,c,t,e,l,d);m.ni.copy(f);const x=zn;f.scale(v.dot(f),x),h.vsub(x,x),m.ri.copy(x),m.ri.vsub(r.position,m.ri),m.rj.copy(h),m.rj.vsub(c.position,m.rj),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}}}const mt=new a,gt=new a,bt=new a,wn=new a,yn=new a,xn=new G,gn=new G,bn=new a,En=new a,zn=new a,Cn=new a,Mn=new a;new a;const Sn=new a,An=new a,Pn=new a,Nn=new a,Bn=new a,Fn=new a,_n=new a,In=new a,Tn=new a,qn=new a,Ln=new a,Rn=new Z,kn=[],Lt=new a,ge=new a,jn=new a,Vn=new a,Wn=new a;function On(q,t,e){let s=null;const n=q.length;for(let i=0;i!==n;i++){const o=q[i],r=jn;q[(i+1)%n].vsub(o,r);const c=Vn;r.cross(t,c);const l=Wn;e.vsub(o,l);const d=c.dot(l);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const Rt=new a,Dn=new a,Hn=new a,Gn=new a,Yn=[new a,new a,new a,new a,new a,new a],Xn=new a,Un=new a,Kn=new a,Zn=new a,$n=new a,Qn=new a,Jn=new a,ti=new a,ei=new a,si=new a,ni=new a,ii=new a,oi=new a,ri=new a;new a;new a;const ai=new a,ci=new a,li=new a,hi=new a,di=new a,ui=new a,pi=new a,fi=new a,mi=new a,vi=new a,be=new G,wi=new a;new a;const yi=new a,Ee=new a,xi=new a,gi=new a,bi=new a,Ei=[0],zi=new a,Ci=new a;class ze{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let c=0;c<i;c++){let l=!1;const d=s[c];for(;d>n[r];)r++;l=d===n[r],l||Ce(t,d)}r=0;for(let c=0;c<o;c++){let l=!1;const d=n[c];for(;d>s[r];)r++;l=s[r]===d,l||Ce(e,d)}}}function Ce(q,t){q.push((t&4294901760)>>16,t&65535)}const Kt=(q,t)=>q<t?`${q}-${t}`:`${t}-${q}`;class Mi{constructor(){this.data={keys:[]}}get(t,e){const s=Kt(t,e);return this.data[s]}set(t,e,s){const n=Kt(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=Kt(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class Si extends Be{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new a,t.gravity&&this.gravity.copy(t.gravity),this.broadphase=t.broadphase!==void 0?t.broadphase:new Fe,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new hn,this.constraints=[],this.narrowphase=new vn(this),this.collisionMatrix=new le,this.collisionMatrixPrevious=new le,this.bodyOverlapKeeper=new ze,this.shapeOverlapKeeper=new ze,this.contactmaterials=[],this.contactMaterialTable=new Mi,this.defaultMaterial=new Wt("default"),this.defaultContactMaterial=new Vt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof jt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=H.ALL,s.from=t,s.to=e,s.callback=n,Zt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=H.ANY,s.from=t,s.to=e,s.result=n,Zt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=H.CLOSEST,s.from=t,s.to=e,s.result=n,Zt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof N&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=Y.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=Y.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(Y.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const c=this.bodies[r];c.previousPosition.lerp(c.position,o,c.interpolatedPosition),c.previousQuaternion.slerp(c.quaternion,o,c.interpolatedQuaternion),c.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=Fi,n=_i,i=this.bodies.length,o=this.bodies,r=this.solver,c=this.gravity,l=this.doProfiling,d=this.profile,u=N.DYNAMIC;let h=-1/0;const f=this.constraints,p=Bi;c.length();const w=c.x,v=c.y,y=c.z;let m=0;for(l&&(h=Y.now()),m=0;m!==i;m++){const b=o[m];if(b.type===u){const A=b.force,S=b.mass;A.x+=S*w,A.y+=S*v,A.z+=S*y}}for(let b=0,A=this.subsystems.length;b!==A;b++)this.subsystems[b].update();l&&(h=Y.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),l&&(d.broadphase=Y.now()-h);let x=f.length;for(m=0;m!==x;m++){const b=f[m];if(!b.collideConnected)for(let A=s.length-1;A>=0;A-=1)(b.bodyA===s[A]&&b.bodyB===n[A]||b.bodyB===s[A]&&b.bodyA===n[A])&&(s.splice(A,1),n.splice(A,1))}this.collisionMatrixTick(),l&&(h=Y.now());const g=Ni,E=e.length;for(m=0;m!==E;m++)g.push(e[m]);e.length=0;const C=this.frictionEquations.length;for(m=0;m!==C;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,g,this.frictionEquations,p),l&&(d.narrowphase=Y.now()-h),l&&(h=Y.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const P=e.length;for(let b=0;b!==P;b++){const A=e[b],S=A.bi,z=A.bj,W=A.si,T=A.sj;let L;if(S.material&&z.material?L=this.getContactMaterial(S.material,z.material)||this.defaultContactMaterial:L=this.defaultContactMaterial,L.friction,S.material&&z.material&&(S.material.friction>=0&&z.material.friction>=0&&S.material.friction*z.material.friction,S.material.restitution>=0&&z.material.restitution>=0&&(A.restitution=S.material.restitution*z.material.restitution)),r.addEquation(A),S.allowSleep&&S.type===N.DYNAMIC&&S.sleepState===N.SLEEPING&&z.sleepState===N.AWAKE&&z.type!==N.STATIC){const V=z.velocity.lengthSquared()+z.angularVelocity.lengthSquared(),D=z.sleepSpeedLimit**2;V>=D*2&&(S.wakeUpAfterNarrowphase=!0)}if(z.allowSleep&&z.type===N.DYNAMIC&&z.sleepState===N.SLEEPING&&S.sleepState===N.AWAKE&&S.type!==N.STATIC){const V=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),D=S.sleepSpeedLimit**2;V>=D*2&&(z.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,z,!0),this.collisionMatrixPrevious.get(S,z)||(Ct.body=z,Ct.contact=A,S.dispatchEvent(Ct),Ct.body=S,z.dispatchEvent(Ct)),this.bodyOverlapKeeper.set(S.id,z.id),this.shapeOverlapKeeper.set(W.id,T.id)}for(this.emitContactEvents(),l&&(d.makeContactConstraints=Y.now()-h,h=Y.now()),m=0;m!==i;m++){const b=o[m];b.wakeUpAfterNarrowphase&&(b.wakeUp(),b.wakeUpAfterNarrowphase=!1)}for(x=f.length,m=0;m!==x;m++){const b=f[m];b.update();for(let A=0,S=b.equations.length;A!==S;A++){const z=b.equations[A];r.addEquation(z)}}r.solve(t,this),l&&(d.solve=Y.now()-h),r.removeAllEquations();const M=Math.pow;for(m=0;m!==i;m++){const b=o[m];if(b.type&u){const A=M(1-b.linearDamping,t),S=b.velocity;S.scale(A,S);const z=b.angularVelocity;if(z){const W=M(1-b.angularDamping,t);z.scale(W,z)}}}this.dispatchEvent(Pi),l&&(h=Y.now());const B=this.stepnumber%(this.quatNormalizeSkip+1)===0,I=this.quatNormalizeFast;for(m=0;m!==i;m++)o[m].integrate(t,B,I);this.clearForces(),this.broadphase.dirty=!0,l&&(d.integrate=Y.now()-h),this.stepnumber+=1,this.dispatchEvent(Ai);let k=!0;if(this.allowSleep)for(k=!1,m=0;m!==i;m++){const b=o[m];b.sleepTick(this.time),b.sleepState!==N.SLEEPING&&(k=!0)}this.hasActiveBodies=k}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(nt,it),t){for(let i=0,o=nt.length;i<o;i+=2)Mt.bodyA=this.getBodyById(nt[i]),Mt.bodyB=this.getBodyById(nt[i+1]),this.dispatchEvent(Mt);Mt.bodyA=Mt.bodyB=null}if(e){for(let i=0,o=it.length;i<o;i+=2)St.bodyA=this.getBodyById(it[i]),St.bodyB=this.getBodyById(it[i+1]),this.dispatchEvent(St);St.bodyA=St.bodyB=null}nt.length=it.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(nt,it),s){for(let i=0,o=nt.length;i<o;i+=2){const r=this.getShapeById(nt[i]),c=this.getShapeById(nt[i+1]);ot.shapeA=r,ot.shapeB=c,r&&(ot.bodyA=r.body),c&&(ot.bodyB=c.body),this.dispatchEvent(ot)}ot.bodyA=ot.bodyB=ot.shapeA=ot.shapeB=null}if(n){for(let i=0,o=it.length;i<o;i+=2){const r=this.getShapeById(it[i]),c=this.getShapeById(it[i+1]);rt.shapeA=r,rt.shapeB=c,r&&(rt.bodyA=r.body),c&&(rt.bodyB=c.body),this.dispatchEvent(rt)}rt.bodyA=rt.bodyB=rt.shapeA=rt.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new Z;const Zt=new H,Y=globalThis.performance||{};if(!Y.now){let q=Date.now();Y.timing&&Y.timing.navigationStart&&(q=Y.timing.navigationStart),Y.now=()=>Date.now()-q}new a;const Ai={type:"postStep"},Pi={type:"preStep"},Ct={type:N.COLLIDE_EVENT_NAME,body:null,contact:null},Ni=[],Bi=[],Fi=[],_i=[],nt=[],it=[],Mt={type:"beginContact",bodyA:null,bodyB:null},St={type:"endContact",bodyA:null,bodyB:null},ot={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},rt={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};class Ii{constructor(t,e,s){_t(this,"PI_2",Math.PI/2);_t(this,"twoPI",Math.PI*2);_t(this,"downAxis",new wt(0,-1,0));this.object=t,this.camera=e,this.domElement=s,this.offset=new wt,this.cameraQuat=new ie().setFromUnitVectors(e.up,new wt(0,1,0)),this.cameraQuatInv=this.cameraQuat.inverse(),this.spherical=new oe,this.sphericalDelta=new oe,this.minDistance=0,this.maxDistance=20,this.distanceStepSize=1,this.currentDistance=6,this.distanceTheshold=5,this.isLocked=!1,this.isGrounded=!1,this.move={left:0,right:0,up:0,down:0,forward:0,backward:0},this.acceleration=12,this.canMove=!0,document.addEventListener("mousedown",async n=>{n.stopPropagation(),this.onMouseDown()}),document.addEventListener("contextmenu",async n=>{n.preventDefault(),this.onMouseDown()}),document.addEventListener("pointerlockchange",async()=>{this.onPointerLockChange()}),document.addEventListener("mousemove",async n=>{this.onMouseMove(n)}),document.addEventListener("keydown",async n=>{this.onKeyDown(n)}),document.addEventListener("keyup",async n=>{this.onKeyUp(n)}),document.addEventListener("wheel",async n=>{this.onWheel(n)}),this.isLocked=!0,this.onMouseMove(new MouseEvent("mousemove",{movementX:0,movementY:0})),this.isLocked=!1}onMouseMove(t){if(this.isLocked===!1)return;const e=t.movementX||0,s=t.movementY||0,n=new wt().copy(this.object.position);this.sphericalDelta.theta=this.twoPI*e/this.domElement.clientHeight,this.sphericalDelta.phi=this.twoPI*s/this.domElement.clientHeight,this.offset.copy(this.camera.position).sub(n),this.offset.applyQuaternion(this.cameraQuat),this.spherical.setFromVector3(this.offset),this.spherical.theta-=this.sphericalDelta.theta,this.spherical.phi-=this.sphericalDelta.phi,this.spherical.phi=Math.max(0,Math.min(Math.PI,this.spherical.phi)),this.spherical.makeSafe(),this.spherical.radius=this.currentDistance,this.offset.setFromSpherical(this.spherical),this.offset.applyQuaternion(this.cameraQuatInv),this.update()}onMouseDown(){this.isLocked||this.domElement.requestPointerLock()}onPointerLockChange(){document.pointerLockElement===this.domElement?this.isLocked=!0:this.isLocked=!1}onKeyDown(t){if(this.canMove)switch(t.key){case"a":this.move.left=1;break;case"d":this.move.right=1;break;case"w":this.move.forward=1;break;case"s":this.move.backward=1;break;case" ":this.isGrounded&&(this.move.up=1);break;case"e":this.spawnCube();break}}onKeyUp(t){switch(t.key){case"a":this.move.left=0;break;case"d":this.move.right=0;break;case"w":this.move.forward=0;break;case"s":this.move.backward=0;break;case" ":this.move.up=0;break}}onWheel(t){const e=t.deltaY>0?this.distanceStepSize:-this.distanceStepSize;this.currentDistance>=this.minDistance-e&&this.currentDistance<=this.maxDistance-e&&(this.currentDistance+=e),this.onMouseMove(new MouseEvent("mousemove",{movementX:0,movementY:0}))}getPlayerDirection(){return new wt(-this.move.left+this.move.right,0,-this.move.forward+this.move.backward).normalize()}update(){const t=this.getPlayerDirection().applyQuaternion(this.object.quaternion).multiplyScalar(this.acceleration);this.object.velocity.set(t.x,this.object.velocity.y,t.z),this.move.up&&this.isGrounded?this.object.velocity.y=10:this.isGrounded&&(this.object.velocity.y=0);const e=new wt().copy(this.object.position);this.camera.position.copy(e).add(this.offset),this.camera.lookAt(e);try{const i=new Ke(e,this.downAxis,0,1.1).intersectObjects([this.camera.parent],!0);if(i.length>0){if(this.canMove)switch(i[0].object.name){case"floor":document.dispatchEvent(new CustomEvent("player",{detail:i[0]})),this.canMove=!1;break;case"randomCube":document.dispatchEvent(new CustomEvent("player",{detail:i[0]}));break;default:break}this.isGrounded=!0}else this.isGrounded=!1}catch{}const s=new Pe().setFromQuaternion(this.camera.quaternion);s.reorder("YXZ"),s.x=0;const n=new ie().setFromEuler(s);this.object.quaternion.set(n.x,n.y,n.z,n.w)}}function Ti(q,t,e){const s=new Pt({color:11184810}),n=new Ne(2,2,2);for(let i=0;i<100;i++){const o=new kt(n,s),r=50,c=Math.random()<.5?-1:1,l=Math.random()<.5?-1:1,d=c*Math.random()*r,u=1,h=l*Math.random()*r;o.position.set(d,u,h),o.name="randomCube",o.castShadow=!0,o.receiveShadow=!0,q.add(o);const f=new Et(new a(1,1,1)),p=new N({mass:0});p.position.set(d,u,h),p.addShape(f),t.addBody(p),o.userData.physics=p,e.push(o)}}const{document:Me,window:$t}=Xe;function Se(q){let t,e;return{c(){t=ct("h1"),e=lt("Dead."),this.h()},l(s){t=ht(s,"H1",{class:!0});var n=dt(t);e=ut(n,"Dead."),n.forEach(K),this.h()},h(){Ae(t,"class","text-red-800")},m(s,n){At(s,t,n),X(t,e)},d(s){s&&K(t)}}}function qi(q){let t,e,s,n,i,o,r,c,l,d,u,h,f,p,w,v,y,m,x,g,E,C,P,M=q[3]&&Se();return{c(){t=pt(),e=ct("canvas"),s=pt(),n=ct("div"),i=ct("h1"),o=lt("Highscore: "),r=lt(q[1]),c=pt(),l=ct("h1"),d=lt("Score: "),u=lt(q[0]),h=pt(),f=ct("p"),p=lt("Use the 'wasd' keys to move around"),w=pt(),v=ct("p"),y=lt("Press space to jump"),m=pt(),x=ct("p"),g=lt("Press 'r' to restart"),E=pt(),M&&M.c(),this.h()},l(_){He('[data-svelte="svelte-1uqsw9u"]',Me.head).forEach(K),t=ft(_),e=ht(_,"CANVAS",{}),dt(e).forEach(K),s=ft(_),n=ht(_,"DIV",{class:!0});var I=dt(n);i=ht(I,"H1",{});var k=dt(i);o=ut(k,"Highscore: "),r=ut(k,q[1]),k.forEach(K),c=ft(I),l=ht(I,"H1",{});var b=dt(l);d=ut(b,"Score: "),u=ut(b,q[0]),b.forEach(K),h=ft(I),f=ht(I,"P",{});var A=dt(f);p=ut(A,"Use the 'wasd' keys to move around"),A.forEach(K),w=ft(I),v=ht(I,"P",{});var S=dt(v);y=ut(S,"Press space to jump"),S.forEach(K),m=ft(I),x=ht(I,"P",{});var z=dt(x);g=ut(z,"Press 'r' to restart"),z.forEach(K),E=ft(I),M&&M.l(I),I.forEach(K),this.h()},h(){Me.title="The Floor is Lava!",Ae(n,"class","absolute top-0")},m(_,B){At(_,t,B),At(_,e,B),q[10](e),At(_,s,B),At(_,n,B),X(n,i),X(i,o),X(i,r),X(n,c),X(n,l),X(l,d),X(l,u),X(n,h),X(n,f),X(f,p),X(n,w),X(n,v),X(v,y),X(n,m),X(n,x),X(x,g),X(n,E),M&&M.m(n,null),C||(P=[Ht($t,"focus",q[8]),Ht($t,"resize",q[7]),Ht($t,"keypress",q[9])],C=!0)},p(_,[B]){B&2&&se(r,_[1]),B&1&&se(u,_[0]),_[3]?M||(M=Se(),M.c(),M.m(n,null)):M&&(M.d(1),M=null)},i:ne,o:ne,d(_){_&&K(t),_&&K(e),q[10](null),_&&K(s),_&&K(n),M&&M.d(),C=!1,Ge(P)}}}const vt=100;function Li(q,t,e){let s=0,n=0,i=!1,o=!1,r,c,l,d,u,h=[];const f=new is(!0),p=new Si;p.gravity.set(0,-24,0),p.broadphase=new Fe;const w=new Ze;w.background=new $e(11184810);const v=new Qe;v.position.set(vt,vt,vt),v.castShadow=!0,v.shadow.mapSize=new Je(2048,2048),v.shadow.camera.left=-vt,v.shadow.camera.right=vt,v.shadow.camera.top=vt,v.shadow.camera.bottom=-vt,w.add(v);const y=new ts(11184810,11184810,.7);w.add(y);const m=new es(100,100,1,1);m.rotateX(-Math.PI/2);let x=new Pt({color:16711680});const g=new kt(m,x);g.name="floor",g.receiveShadow=!0,w.add(g);const E=new cn,C=new N({mass:0});C.addShape(E),C.quaternion.setFromAxisAngle(new a(1,0,0),-Math.PI/2),p.addBody(C);const P=new Ne(2,2,2);x=new Pt({color:65280});const M=new kt(P,x);M.castShadow=!0,M.receiveShadow=!0,M.name="player",w.add(M);const _=new Et(new a(1,1,1));d=new N({mass:10}),d.position.set(0,10,0),d.addShape(_),p.addBody(d);function B(){if(requestAnimationFrame(B),i){const T=f.getDelta();p.step(T),u.canMove?(M.position.x=d.position.x,M.position.y=d.position.y,M.position.z=d.position.z):M.position.y>-2&&(M.position.y-=.01),M.quaternion.x=d.quaternion.x,M.quaternion.y=d.quaternion.y,M.quaternion.z=d.quaternion.z,M.quaternion.w=d.quaternion.w,h.forEach(L=>{const V=L.userData.physics.position;L.position.x=V.x,L.position.y=V.y,L.position.z=V.z;const D=L.userData.physics.quaternion;L.quaternion.x=D.x,L.quaternion.y=D.y,L.quaternion.z=D.z,L.quaternion.w=D.w,L.material.color.r<.5&&(V.y<-2?w.remove(L):V.y-=.01)}),u.update(),c.render(w,l)}}function I(){e(2,i=!0),e(3,o=!1),u.canMove=!0,e(0,s=0),h.forEach(T=>{p.removeBody(T.userData.physics),w.remove(T)}),d.position.set(0,10,0),Ti(w,p,h),k()}function k(){x=new Pt({color:11184810});const T=new kt(P,x);T.position.y+=1,T.castShadow=!0,T.receiveShadow=!0,T.name="randomCube",w.add(T);const L=new Et(new a(1,1,1)),V=new N({mass:0});V.position.set(0,1,0),V.addShape(L),p.addBody(V),T.userData.physics=V,h.push(T)}function b(){l.aspect=window.innerWidth/window.innerHeight,l.updateProjectionMatrix(),c.setSize(window.innerWidth,window.innerHeight)}function A(T){const L=T.detail.object,V=L.material.color;L.name==="floor"?(e(3,o=!0),s>=n&&(localStorage.setItem("highscore",s),e(1,n=s))):L.name==="randomCube"&&V.r>.5&&(e(0,s+=1),L.material=new Pt({color:3355443}))}Ye(()=>(localStorage.getItem("highscore")==null?localStorage.setItem("highscore",0):e(1,n=localStorage.getItem("highscore")),c=new ss({canvas:r,logarithmicDepthBuffer:!0}),c.shadowMap.enabled=!0,c.setSize(window.innerWidth,window.innerHeight),l=new ns(90,window.innerWidth/window.innerHeight,.01,1e3),l.position.set(10,10,10),w.add(l),u=new Ii(d,l,c.domElement),document.addEventListener("player",A),I(),B(),()=>{document.removeEventListener("player",A),l=null,c.forceContextLoss(),c.dispose(),cancelAnimationFrame(B)}));const S=()=>{document.visibilityState==="hidden"?(e(2,i=!1),f.stop()):(f.start(),e(2,i=!0))},z=T=>{T.key=="r"&&I()};function W(T){Ue[T?"unshift":"push"](()=>{r=T,e(4,r)})}return[s,n,i,o,r,f,I,b,S,z,W]}class Hi extends We{constructor(t){super(),Oe(this,t,Li,qi,De,{})}}export{Hi as default};
